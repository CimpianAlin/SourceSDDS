<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties PUBLIC "-//JTRS//DTD SCA V2.2.2 PRF//EN" "properties.dtd">
<properties>
  <struct id="advanced_optimizations" mode="readwrite">
    <description>These advanced optimizations are only read during component start and cannot be changed while the component is started. </description>
    <simple id="advanced_optimizations::buffer_size" name="buffer_size" type="ulong">
      <description>Number of packets to put in the sdds buffer at startup. Note: The total amount of memory allocated is bufferSize * 1080b</description>
      <value>200000</value>
      <units>pkts</units>
    </simple>
    <simple id="advanced_optimizations::udp_socket_buffer_size" mode="readwrite" name="udp_socket_buffer_size" type="ulong">
      <description>The kernels UDP socket buffer size. If non-zero, an attempt will be made to set the socket buffer size. Will be set to actual socket buffer size if set fails. The max UDP socket buffer size is a system configuration and can be set with sysctl. </description>
      <value>134217728</value>
      <units>bytes</units>
      <kind kindtype="property"/>
      <action type="external"/>
    </simple>
    <simple id="advanced_optimizations::pkts_per_socket_read" name="pkts_per_socket_read" type="ushort">
      <description>The number of UDP packets to request from the kernel per read (recvmmsg). This must be significantly less then the total buffer size. See recvmmsg for details. </description>
      <value>500</value>
      <units>pkts</units>
    </simple>
    <simple id="advanced_optimizations::sdds_pkts_per_bulkio_push" name="sdds_pkts_per_bulkio_push" type="ushort">
      <description>The number of SDDS packets read from the internal buffer and pushed out via bulkIO. SDDS packets have a 1024 B payload so CORBA_MAX / 1024 will  yield max data per push. This value is capped at the max corba value.</description>
      <value>1000</value>
      <units>pkts</units>
    </simple>
    <simple id="advanced_optimizations::socket_read_thread_affinity" name="socket_read_thread_affinity" type="string">
      <description>Set using the same bitmask syntax (eg. FFFFFFFF) as taskset and limits the CPU affinity of the thread which reads from the socket to only the specified CPUs. Generally this is not needed.</description>
      <value></value>
    </simple>
    <simple id="advanced_optimizations::work_thread_affinity" name="sdds_to_bulkio_thread_affinity" type="string">
      <description>Set using the same bitmask syntax (eg. FFFFFFFF) as taskset and limits the CPU affinity of the thread which consumes packets from internal buffer, and sends out bulkio</description>
      <value></value>
    </simple>
    <configurationkind kindtype="property"/>
  </struct>
  <struct id="attachment_override" mode="readwrite">
    <description>To override the configuration </description>
    <simple id="attachment_override::enabled" name="enabled" type="boolean">
      <value>false</value>
    </simple>
    <simple id="attachment_override::ip_address" name="ip_address" type="string">
      <value>127.0.0.1</value>
    </simple>
    <simple id="attachment_override::vlan" name="vlan" type="ushort">
      <value>0</value>
    </simple>
    <simple id="attachment_override:port" mode="readwrite" name="port" type="ushort">
      <value>29495</value>
      <kind kindtype="property"/>
      <action type="external"/>
    </simple>
    <configurationkind kindtype="property"/>
  </struct>
  <simple id="interface" mode="readwrite" name="interface" type="string">
    <value>eth0</value>
    <kind kindtype="property"/>
    <action type="external"/>
  </simple>
  <struct id="advanced_configuration" mode="readwrite">
    <simple id="advanced_configuration::push_on_ttv" name="push_on_ttv" type="boolean">
      <description>If this flag is set, when a new SDDS packet comes in with the TTValid bit set, the component will push the data that it has received so far, and start the next CORBA transfer with the data in the packet it just received with the TTValid bit set.</description>
      <value>false</value>
    </simple>
    <simple id="advanced_configuration::wait_on_ttv" name="wait_on_ttv" type="boolean">
      <description>If set, no data will be sent unless a valid timestamp has been received.</description>
      <value>false</value>
    </simple>
    <configurationkind kindtype="property"/>
  </struct>
  <struct id="status" mode="readonly">
    <simple id="status::expected_sequence_number" name="expected_sequence_number" type="ushort">
      <value>0</value>
    </simple>
    <simple id="status::dropped_packets" name="dropped_packets" type="ulong">
      <value>0</value>
    </simple>
    <simple id="status::bits_per_sample" name="bits_per_sample" type="ushort">
      <value>0</value>
    </simple>
    <simple id="status::empty_buffers_available" name="empty_buffers_available" type="string">
      <description>The amount (and percentage of total) of empty buffers available to pull from</description>
      <value></value>
    </simple>
    <simple id="status::buffers_to_work" name="buffers_to_work" type="string">
      <description>The amount (and percentage of total) of full buffers needing to be converted to bulkIO</description>
      <value></value>
    </simple>
    <configurationkind kindtype="property"/>
  </struct>
</properties>
